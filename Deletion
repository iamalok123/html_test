// C program to implement insert operation in 

// an sorted array. 

#include <stdio.h> 



// Inserts a key in arr[] of given capacity. n is current 

// size of arr[]. This function returns n+1 if insertion 

// is successful, else n. 

int insertSorted(int arr[], int n, int key, int capacity) 

{ 

	// Cannot insert more elements if n is already 

	// more than or equal to capacity 

	if (n >= capacity) 

		return n; 



	int i; 

	for (i = n - 1; (i >= 0 && arr[i] > key); i--) 

		arr[i + 1] = arr[i]; 



	arr[i + 1] = key; 



	return (n + 1); 

} 



/* Driver code */

int main() 

{ 

	int arr[20] = { 12, 16, 20, 40, 50, 70 }; 

	int capacity = sizeof(arr) / sizeof(arr[0]); 

	int n = 6; 

	int i, key = 26; 



	printf("\nBefore Insertion: "); 

	for (i = 0; i < n; i++) 

		printf("%d ", arr[i]); 



	// Function call 

	n = insertSorted(arr, n, key, capacity); 



	printf("\nAfter Insertion: "); 

	for (i = 0; i < n; i++) 

		printf("%d ", arr[i]); 



	return 0; 

}

2. // C program to implement delete operation in a 

// sorted array 

#include <stdio.h> 



// To search a key to be deleted 

int binarySearch(int arr[], int low, int high, int key); 



/* Function to delete an element */

int deleteElement(int arr[], int n, int key) 

{ 

	// Find position of element to be deleted 

	int pos = binarySearch(arr, 0, n - 1, key); 



	if (pos == -1) { 

		printf("Element not found"); 

		return n; 

	} 



	// Deleting element 

	int i; 

	for (i = pos; i < n - 1; i++) 

		arr[i] = arr[i + 1]; 



	return n - 1; 

} 



int binarySearch(int arr[], int low, int high, int key) 

{ 

	if (high < low) 

		return -1; 

	int mid = (low + high) / 2; 

	if (key == arr[mid]) 

		return mid; 

	if (key > arr[mid]) 

		return binarySearch(arr, (mid + 1), high, key); 

	return binarySearch(arr, low, (mid - 1), key); 

} 



// Driver code 

int main() 

{ 

	int i; 

	int arr[] = { 10, 20, 30, 40, 50 }; 



	int n = sizeof(arr) / sizeof(arr[0]); 

	int key = 30; 



	printf("Array before deletion\n"); 

	for (i = 0; i < n; i++) 

		printf("%d ", arr[i]); 



	// Function call 

	n = deleteElement(arr, n, key); 



	printf("\n\nArray after deletion\n"); 

	for (i = 0; i < n; i++) 

		printf("%d ", arr[i]); 

}


// Just ignore the code written after line 206
#!/bin/bash
echo -n "Enter a Number: "
read number
i=2
f=0
k=$(( $number/2))

while [[ $i -le $k ]]
do
	if  [[ $(($number % $i)) -eq 0 ]] 
	then
		f=1
	fi
	i=$(($i+1))
done
if [[ $f -eq 1 ]]
then
	echo "not prime"
else
	echo "prime"
fi
